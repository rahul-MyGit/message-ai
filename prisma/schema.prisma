generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  emailVerified    DateTime?   @map("email_verified")
  image            String?
  password         String?
  subscription     Subscription?
  integrations     Integrations[]
  automations      Automation[]
  accounts         Account[]
  sessions         Session[]

   createdAt    DateTime       @default(now())
   updatedAt    DateTime       @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id         String            @id @default(uuid())
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?           @unique
  plan       SUBSCRIPTION_PLAN @default(FREE)
  customerId String?           @unique

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
}

model Integrations {
  id          String       @id @default(uuid())
  name        INTEGRATIONS @default(INSTAGRAM)
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      
  token       String       @unique
  expiresAt   DateTime?
  instagramId String?      @unique
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Automation {
  id        String    @id @default(cuid()) 
  name      String    @default("Untitled")
  active    Boolean   @default(false)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   
  keywords  Keyword[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Dms {
  id           String      @id @default(cuid()) 
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     
  senderId     String?
  reciever     String?
  message      String?

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Post {
  id           String      @id @default(cuid()) 
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     
}

model Listener {
  id           String     @id @default(cuid()) 
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique 
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(cuid()) 
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     
}

model Keyword {
  id           String      @id @default(cuid()) 
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     

  @@unique([automationId, word]) 
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
  TWITTER
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}